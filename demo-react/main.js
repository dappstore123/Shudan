const {createElement: h, Component} = require('react')
const {render} = require('react-dom')
const Board = require('@sabaki/go-board')
const {Goban} = require('..')
const abi = [{"constant":true,"inputs":[],"name":"challengeStatus","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"giveUpChallenge","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"getBackOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"invert","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"challengeReject","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"challengerValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destruct","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"updateScore","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getBoard","outputs":[{"internalType":"int256[]","name":"","type":"int256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"applyforGameOverStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"challenger","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint32","name":"x","type":"uint32"}],"name":"play","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"resign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"rejectApplyforGameOver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"applyforGameOver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"challengeConfirm","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"winerColor","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"int256","name":"","type":"int256"}],"name":"timer","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"int256","name":"","type":"int256"}],"name":"colors","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"forcerGameOver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"confirmApplyforGameOver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"getBackChallenge","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getCaps","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ownerValue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getGroupIndex","outputs":[{"internalType":"int256[]","name":"","type":"int256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"gameOver","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"start","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint32","name":"co","type":"uint32"},{"internalType":"int256","name":"color","type":"int256"}],"name":"playMove","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"N","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"toPlay","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"challenge","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"winer","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"s","type":"uint256"}],"name":"getRecent","outputs":[{"internalType":"int256","name":"","type":"int256"},{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"step","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"players","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"passMove","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"score","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"n","type":"uint32"}],"payable":true,"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"challengeEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"address","name":"challenger","type":"address"}],"name":"challengeConfirmEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"address","name":"challenger","type":"address"}],"name":"challengeRejectEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"giveUpChallengeEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"getBackChallengeEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"destructEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"}],"name":"resignEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"},{"indexed":false,"internalType":"uint32","name":"x","type":"uint32"}],"name":"playEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"}],"name":"passMoveEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"}],"name":"applyforGameOverEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"}],"name":"confirmApplyforGameOverEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"}],"name":"rejectApplyforGameOverEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"int256","name":"color","type":"int256"}],"name":"forcerGameOverEvent","type":"event"}];
const chineseCoord = [
    '一', '二', '三', '四', '五', '六', '七', '八', '九', '十',
    '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九'
]
const N =19;

const code = "0x6080604052600080557ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6001556002805560038055600480557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600b556000600c556001600d556000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055506000601355604b6018556000602160006101000a81548160ff02191690831515021790555060016022556000602360006101000a81548160ff02191690831515021790555060646024556103e86025556040516200622938038062006229833981810160405260208110156200011157600080fd5b810190808051906020019092919050505060098163ffffffff1614806200013e5750600d8163ffffffff16145b8062000150575060138163ffffffff16145b6200015a57600080fd5b33600e60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000429050600160028281620001ad57fe5b061415620001dd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6022819055505b3460108190555081600660006101000a81548163ffffffff021916908363ffffffff1602179055506000600234901c90508034036010819055507323055adc5d4fb70d9b065393c8c6448d1708b3b873ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000272573d6000803e3d6000fd5b50505050615fa380620002866000396000f3fe60806040526004361061021a5760003560e01c806393130d7e11610123578063c5314e9e116100ab578063d62c7cb11161006f578063d62c7cb11461088b578063e25fe175146108e1578063e2eb41ff1461090c578063e45b614c14610971578063efedc669146109885761021a565b8063c5314e9e1461077d578063c9e525df146107c8578063cf0a8272146107ff578063d2ef73981461082a578063d426b5d4146108345761021a565b80639d706d31116100f25780639d706d3114610656578063a0471d9b14610688578063b56a9054146106b3578063bdb337d11461071f578063be9a65551461074e5761021a565b806393130d7e1461059657806396c5aa4414610611578063999291c0146106285780639c749b0b1461063f5761021a565b8063534db0e2116101a6578063705d431f11610175578063705d431f146104975780637c3c4c40146104ae57806389a8d672146104c557806389bcdb9d146104f05780638da5cb5b1461053f5761021a565b8063534db0e2146103d15780635f2aacc41461042857806369652fcf146104695780636b4d0890146104805761021a565b80632899240b116101ed5780632899240b1461028f5780632b68b9c6146102f45780632d9e9c9c1461030b5780633264a34b146103365780633d641ed1146103a25761021a565b806303cd88801461021f5780630bd070c01461024a57806317c90733146102615780631b835c9b14610278575b600080fd5b34801561022b57600080fd5b506102346109b3565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b5061025f6109b9565b005b34801561026d57600080fd5b50610276610db6565b005b34801561028457600080fd5b5061028d610ee8565b005b34801561029b57600080fd5b506102de600480360360208110156102b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110f6565b6040518082815260200191505060405180910390f35b34801561030057600080fd5b5061030961110e565b005b34801561031757600080fd5b50610320611246565b6040518082815260200191505060405180910390f35b34801561034257600080fd5b5061034b611524565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561038e578082015181840152602081019050610373565b505050509050019250505060405180910390f35b3480156103ae57600080fd5b506103b761157c565b604051808215151515815260200191505060405180910390f35b3480156103dd57600080fd5b506103e661158f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043457600080fd5b506104676004803603602081101561044b57600080fd5b81019080803563ffffffff1690602001909291905050506115b5565b005b34801561047557600080fd5b5061047e611800565b005b34801561048c57600080fd5b50610495611a7f565b005b3480156104a357600080fd5b506104ac611cf3565b005b3480156104ba57600080fd5b506104c3611f71565b005b3480156104d157600080fd5b506104da6120d6565b6040518082815260200191505060405180910390f35b3480156104fc57600080fd5b506105296004803603602081101561051357600080fd5b81019080803590602001909291905050506120dc565b6040518082815260200191505060405180910390f35b34801561054b57600080fd5b506105546120f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a257600080fd5b506105cf600480360360208110156105b957600080fd5b810190808035906020019092919050505061211a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061d57600080fd5b5061062661214d565b005b34801561063457600080fd5b5061063d6123a2565b005b34801561064b57600080fd5b5061065461261e565b005b34801561066257600080fd5b5061066b612a0c565b604051808381526020018281526020019250505060405180910390f35b34801561069457600080fd5b5061069d612a23565b6040518082815260200191505060405180910390f35b3480156106bf57600080fd5b506106c8612a29565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561070b5780820151818401526020810190506106f0565b505050509050019250505060405180910390f35b34801561072b57600080fd5b50610734612a81565b604051808215151515815260200191505060405180910390f35b34801561075a57600080fd5b50610763612a94565b604051808215151515815260200191505060405180910390f35b34801561078957600080fd5b506107c6600480360360408110156107a057600080fd5b81019080803563ffffffff16906020019092919080359060200190929190505050612aa7565b005b3480156107d457600080fd5b506107dd612def565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561080b57600080fd5b50610814612e05565b6040518082815260200191505060405180910390f35b610832612e0b565b005b34801561084057600080fd5b506108496130c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561089757600080fd5b506108c4600480360360208110156108ae57600080fd5b81019080803590602001909291905050506130ea565b604051808381526020018281526020019250505060405180910390f35b3480156108ed57600080fd5b506108f6613189565b6040518082815260200191505060405180910390f35b34801561091857600080fd5b5061095b6004803603602081101561092f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061318f565b6040518082815260200191505060405180910390f35b34801561097d57600080fd5b506109866131a7565b005b34801561099457600080fd5b5061099d61348d565b6040518082815260200191505060405180910390f35b60205481565b6000339050600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a1857600080fd5b60001515600e60019054906101000a900460ff16151514610a3857600080fd5b600160205414610a4757600080fd5b6000602081905550600f60006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560003073ffffffffffffffffffffffffffffffffffffffff163190506000602860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610bc9573373ffffffffffffffffffffffffffffffffffffffff166108fc602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610b5c573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff1631905080602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401821015610bc757600080fd5b505b7f73f93887d06298a2ffaea2aea723d1703ceab4202276f6410c7e1170d4955d9f82602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1602860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055602b600060296000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560296000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b600033905060003073ffffffffffffffffffffffffffffffffffffffff16319050600060105411610de657600080fd5b600060205414610df557600080fd5b600060105414610e77573373ffffffffffffffffffffffffffffffffffffffff166108fc6010549081150290604051600060405180830381858888f19350505050158015610e47573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff163190508060105401821015610e7557600080fd5b505b7fb4fc1ed6f57c4845066f0f724896b19fc8b7bab4779adeb72cbb1314c578448f82601054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000339050600e60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f4757600080fd5b60001515600e60019054906101000a900460ff16151514610f6757600080fd5b600160205414610f7657600080fd5b60006020819055507fdece7d301ab01ab0252e1d3ab1c7f3d81835955da93cdb93d1645daad2f8fa5881600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600f60006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055602b600060296000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b60286020528060005260406000206000915090505481565b60011515600e60009054906101000a900460ff1615151480611143575060001515600e60019054906101000a900460ff161515145b61114c57600080fd5b6000339050601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111ab57600080fd5b7fcfcd106afa7df4d11037937259aca0d3d176770f88af88bd8312cd8bc579a302813073ffffffffffffffffffffffffffffffffffffffff1631604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff16ff5b60006060600880548060200260200160405190810160405280929190818152602001828054801561129657602002820191906000526020600020905b815481526020019060010190808311611282575b5050505050905060608060006112ae84600c54613493565b90505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113f3576112e28482613512565b80935081945050506112f2615d74565b6112fc60026137d4565b905060008090505b835181101561136657600084828151811061131b57fe5b602002602001015163ffffffff169050600087828151811061133957fe5b60200260200101519050611356818561383a90919063ffffffff16565b5050508080600101915050611304565b50600061137e600d548361386b90919063ffffffff16565b90506000611397600b548461386b90919063ffffffff16565b9050600060045490508280156113ab575081155b156113ba57600d5490506113d1565b821580156113c55750815b156113d057600b5490505b5b6113dc8882896138c1565b6113e888600c54613493565b9450505050506112b1565b60006009819055506000600a81905550600080905060008090505b85518110156114a557600d5486828151811061142657fe5b6020026020010151141561144657600a6009600082825401925050819055505b600b5486828151811061145557fe5b6020026020010151141561147457600a80600082825401925050819055505b60045486828151811061148357fe5b60200260200101511415611498576001820191505b808060010191505061140e565b50600a600660009054906101000a900463ffffffff16600660009054906101000a900463ffffffff160263ffffffff16816114dc57fe5b0463ffffffff16811015611506576001602760006101000a81548160ff0219169083151502179055505b601854600a5460095403036007819055506007549550505050505090565b6060600880548060200260200160405190810160405280929190818152602001828054801561157257602002820191906000526020600020905b81548152602001906001019080831161155e575b5050505050905090565b602360009054906101000a900460ff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611690576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff161515146116b057600080fd5b60011515600e60019054906101000a900460ff161515146116d057600080fd5b60155460135411156116e157600080fd5b6000601454905060006026544303905060245481111561170057600080fd5b4360268190555080602a6000848152602001908152602001600020541161172657600080fd5b80602a60008481526020019081526020016000205403602a600084815260200190815260200160002081905550602360009054906101000a900460ff161561176d57600080fd5b7f10b1c87f1717ab1c37184180afbcd4e6ac90086db4745e88ae2b7d1aff6b99133360145486604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018263ffffffff1663ffffffff168152602001935050505060405180910390a16117fa84601454612aa7565b50505050565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff161515146118fb57600080fd5b60011515600e60019054906101000a900460ff1615151461191b57600080fd5b601554601354111561192c57600080fd5b7f220a2bd0f3fa8e48a89bdc7fcc4a7052fd3c5d4d6269f5b966951662c0a1d5c733601454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001600e60006101000a81548160ff021916908315150217905550602b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60145402815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60146000828254029250508190555050565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff16151514611b7a57600080fd5b60011515600e60019054906101000a900460ff16151514611b9a57600080fd5b6015546013541115611bab57600080fd5b60006014549050600060265443039050602454811115611bca57600080fd5b4360268190555080602a60008481526020019081526020016000205411611bf057600080fd5b80602a60008481526020019081526020016000205403602a600084815260200190815260200160002081905550602360009054906101000a900460ff16611c3657600080fd5b7f19bd8279ab6a718584f4dfa7782f92f531a19b840417c8194a3d8f10a2a933f533601454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16000602360006101000a81548160ff0219169083151502179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601460008282540292505081905550505050565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611dce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff16151514611dee57600080fd5b60011515600e60019054906101000a900460ff16151514611e0e57600080fd5b6015546013541115611e1f57600080fd5b60006014549050600060265443039050602454811115611e3e57600080fd5b4360268190555080602a60008481526020019081526020016000205411611e6457600080fd5b80602a60008481526020019081526020016000205403602a600084815260200190815260200160002081905550602360009054906101000a900460ff1615611eab57600080fd5b7fded644987b092e2206e25c043f2d23037f3069f7eeba26a2c091697ff048e92833601454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1611f20611246565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6014600082825402925050819055506001602360006101000a81548160ff021916908315150217905550505050565b6000339050600e60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611fd057600080fd5b60001515600e60019054906101000a900460ff16151514611ff057600080fd5b6001600e60016101000a81548160ff0219169083151502179055504360268190555060026020819055507fe77b57531de0a37503862a9e1a9881ccd33ddf6b34ec98e8c81cd35fbce449f881600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b60125481565b602a6020528060005260406000206000915090505481565b600e60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612228576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff1615151461224857600080fd5b60011515600e60019054906101000a900460ff1615151461226857600080fd5b601554601354111561227957600080fd5b6000601454905060006026544303905060245481111561229857600080fd5b4360268190555080602a600084815260200190815260200160002054116122be57600080fd5b80602a60008481526020019081526020016000205403602a6000848152602001908152602001600020819055506122f3611246565b50602760009054906101000a900460ff1661230d57600080fd5b7f71754f2179ac1622ab07e50e912ced7bd8c94367eac8fe7fbfb643db9412f74133601454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001600e60006101000a81548160ff02191690831515021790555061239d613927565b505050565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461247d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff1615151461249d57600080fd5b60011515600e60019054906101000a900460ff161515146124bd57600080fd5b60155460135411156124ce57600080fd5b600060145490506000602654430390506024548111156124ed57600080fd5b4360268190555080602a6000848152602001908152602001600020541161251357600080fd5b80602a60008481526020019081526020016000205403602a600084815260200190815260200160002081905550602360009054906101000a900460ff1661255957600080fd5b7fa47f5985b9b917a7e629ef40d678272745b5620f10a1d2ee8a38088244b645d433601454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a16001600e60006101000a81548160ff0219169083151502179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff601460008282540292505081905550612619613927565b505050565b600033905060003073ffffffffffffffffffffffffffffffffffffffff163190506000602860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161268b57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156126e657600080fd5b6000602860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461281f573373ffffffffffffffffffffffffffffffffffffffff166108fc602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156127b2573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff1631905080602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540182101561281d57600080fd5b505b7fb4fc1ed6f57c4845066f0f724896b19fc8b7bab4779adeb72cbb1314c578448f82602860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1602860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055602b600060296000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560296000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b600080601a60000154601a60010154915091509091565b60105481565b6060601c805480602002602001604051908101604052809291908181526020018280548015612a7757602002820191906000526020600020905b815481526020019060010190808311612a63575b5050505050905090565b600e60009054906101000a900460ff1681565b600e60019054906101000a900460ff1681565b806014548114612ab657600080fd5b826000600660009054906101000a900463ffffffff1663ffffffff168263ffffffff1681612ae057fe5b0490506000600660009054906101000a900463ffffffff1663ffffffff168363ffffffff1681612b0c57fe5b06905060008263ffffffff1610158015612b435750600660009054906101000a900463ffffffff1663ffffffff168263ffffffff16105b8015612b56575060008163ffffffff1610155b8015612b7f5750600660009054906101000a900463ffffffff1663ffffffff168163ffffffff16105b612b8857600080fd5b85600c5460088263ffffffff1681548110612b9f57fe5b906000526020600020015414612bb457600080fd5b6005548163ffffffff161415612bc957600080fd5b612bd581601454613a38565b15612bdf57600080fd5b60001515600e60009054906101000a900460ff16151514612bff57600080fd5b6015546013541115612c1057600080fd5b6000612c1b88613d0b565b905060606001604051908082528060200260200182016040528015612c4f5781602001602082028038833980820191505090505b5090508881600081518110612c6057fe5b602002602001019063ffffffff16908163ffffffff1681525050612c8660088983613f5f565b6060612c92898b613fc7565b9050612ca26008600c5483613f5f565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a02905060018251148015612cd957508084145b15612d045781600081518110612ceb57fe5b602002602001015163ffffffff16600581905550612d0e565b6016546005819055505b600d548a1415612d2f578151601a6000015401601a60000181905550612d42565b8151601a6001015401601a600101819055505b6001601360008282540192505081905550601960405180604001604052808c81526020018d63ffffffff168152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6014600082825402925050819055505050505050505050505050565b600660009054906101000a900463ffffffff1681565b60145481565b6000339050600e60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612e6b57600080fd5b60001515600e60019054906101000a900460ff16151514612e8b57600080fd5b600060205414612e9a57600080fd5b602160009054906101000a900460ff16612eb757612eb6614660565b5b602254600d5402602960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080602b6000602254600d5402815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600234901c90507323055adc5d4fb70d9b065393c8c6448d1708b3b873ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612ffd573d6000803e3d6000fd5b50803403602860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060016020819055507f70d6a706f7582d07cb01c108b917cd7ec921e0f2d5c46442e8e8ab0b000219f58234604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806019805490508310613142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526000815260200160200191505060405180910390fd5b6019838154811061314f57fe5b9060005260206000209060020201600001546019848154811061316e57fe5b90600052602060002090600202016001015491509150915091565b60135481565b60296020528060005260406000206000915090505481565b60003390508073ffffffffffffffffffffffffffffffffffffffff16602b6000601454815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613282576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f752063616e206e6f7420646f2072657369676e6174696f6e000000000000000081525060200191505060405180910390fd5b60001515600e60009054906101000a900460ff161515146132a257600080fd5b60011515600e60019054906101000a900460ff161515146132c257600080fd5b60155460135411156132d357600080fd5b600060145490506000602654430390506024548111156132f257600080fd5b4360268190555080602a6000848152602001908152602001600020541161331857600080fd5b80602a60008481526020019081526020016000205403602a600084815260200190815260200160002081905550602360009054906101000a900460ff161561335f57600080fd5b7fb83715ec7507179d067c6584e436ffbe4caa941116ae18065694058ba276523033601454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160016013600082825401925050819055506133e5615d8e565b6040518060400160405280601454815260200160175481525090506019819080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60146000828254029250508190555060165460058190555061348661489c565b5050505050565b60075481565b600080600090505b83518163ffffffff1610156134e75782848263ffffffff16815181106134bd57fe5b602002602001015114156134da578063ffffffff1691505061350c565b808060010191505061349b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b60608061351d615d74565b613525615d74565b61352d615d74565b6000878763ffffffff168151811061354157fe5b602002602001015190506135648763ffffffff168361383a90919063ffffffff16565b5061357e8763ffffffff168461383a90919063ffffffff16565b505b600083600001511461369557600061359784614a1b565b90506135ac818461383a90919063ffffffff16565b5060606135b882614a61565b905060008090505b815181101561368d5760008282815181106135d757fe5b60200260200101519050848c8263ffffffff16815181106135f457fe5b602002602001015114801561361f575061361d8163ffffffff168761386b90919063ffffffff16565b155b156136435761363d8163ffffffff168861383a90919063ffffffff16565b5061367f565b848c8263ffffffff168151811061365657fe5b60200260200101511461367e5761367c8163ffffffff168961383a90919063ffffffff16565b505b5b5080806001019150506135c0565b505050613580565b83600001516040519080825280602002602001820160405280156136c85781602001602082028038833980820191505090505b50945060008090505b846000015181101561372857846020015181815181106136ed57fe5b602002602001015186828151811061370157fe5b602002602001019063ffffffff16908163ffffffff168152505080806001019150506136d1565b50816000015160405190808252806020026020018201604052801561375c5781602001602082028038833980820191505090505b50955060008090505b82600001518110156137c25760008360200151828151811061378357fe5b602002602001015190508088838151811061379a57fe5b602002602001019063ffffffff16908163ffffffff1681525050508080600101915050613765565b50858595509550505050509250929050565b6137dc615d74565b60608260405190808252806020026020018201604052801561380d5781602001602082028038833980820191505090505b509050613818615d74565b6040518060400160405280600081526020018381525090508092505050919050565b613842615d74565b61384c838361386b565b6138615761385a8383614c84565b9050613865565b8290505b92915050565b600080600090505b83600001518110156138b557828460200151828151811061389057fe5b602002602001015114156138a85760019150506138bb565b8080600101915050613873565b50600090505b92915050565b60008090505b81518163ffffffff161015613921576000828263ffffffff16815181106138ea57fe5b6020026020010151905083858263ffffffff168151811061390757fe5b6020026020010181815250505080806001019150506138c7565b50505050565b600060075413156139b657600d54601281905550602b6000600d54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613a36565b600b54601281905550602b6000600b54815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b6000603260008082016000613a4d9190615da8565b50506060613a5a84614a61565b905060008090505b81518163ffffffff161015613c9e576000828263ffffffff1681518110613a8557fe5b602002602001015190506000601c8263ffffffff1681548110613aa457fe5b90600052602060002001549050806000541415613ac8576000945050505050613d05565b613ad0615dc9565b613ae482601d614e4f90919063ffffffff16565b6040518060a0016040529081600082015481526020016001820160405180602001604052908160008201805480602002602001604051908101604052809291908181526020018280548015613b5857602002820191906000526020600020905b815481526020019060010190808311613b44575b50505050508152505081526020016002820160405180602001604052908160008201805480602002602001604051908101604052809291908181526020018280548015613bc457602002820191906000526020600020905b815481526020019060010190808311613bb0575b5050505050815250508152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090508681606001511415613c6d576060816040015160000151905060008090505b81518163ffffffff161015613c66576000828263ffffffff1681518110613c3a57fe5b60200260200101519050613c58816032614eea90919063ffffffff16565b508080600101915050613c17565b5050613c8e565b6001816040015160000151511415613c8d57600095505050505050613d05565b5b5050508080600101915050613a62565b50613cb98463ffffffff166032614f3190919063ffffffff16565b6000613cc56032615003565b1415613cea57603260008082016000613cde9190615da8565b50506001915050613d05565b603260008082016000613cfd9190615da8565b505060009150505b92915050565b6000816000600660009054906101000a900463ffffffff1663ffffffff168263ffffffff1681613d3757fe5b0490506000600660009054906101000a900463ffffffff1663ffffffff168363ffffffff1681613d6357fe5b06905060008263ffffffff1610158015613d9a5750600660009054906101000a900463ffffffff1663ffffffff168263ffffffff16105b8015613dad575060008163ffffffff1610155b8015613dd65750600660009054906101000a900463ffffffff1663ffffffff168163ffffffff16105b613ddf57600080fd5b600c5460088663ffffffff1681548110613df557fe5b906000526020600020015414613e73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d75737420626520454d5054590000000000000000000000000000000000000081525060200191505060405180910390fd5b613e7b615d74565b613e8560026137d4565b90506060613e9287614a61565b905060008090505b8151811015613f00576000828281518110613eb157fe5b602002602001015163ffffffff169050600060088281548110613ed057fe5b90600052602060002001549050613ef08186614c8490919063ffffffff16565b5050508080600101915050613e9a565b5060018260000151148015613f275750613f25600c548361386b90919063ffffffff16565b155b15613f4f576000613f4260008461501490919063ffffffff16565b9050809650505050613f57565b600154955050505b505050919050565b60008090505b81518163ffffffff161015613fc1576000828263ffffffff1681518110613f8857fe5b6020026020010151905083858263ffffffff1681548110613fa557fe5b9060005260206000200181905550508080600101915050613f65565b50505050565b6060600054601c8363ffffffff1681548110613fdf57fe5b906000526020600020015414613ff457600080fd5b602e600080820160006140079190615da8565b5050602f6000808201600061401c9190615da8565b50506030600080820160006140319190615da8565b50506031600080820160006140469190615da8565b5050606061405383614a61565b905060008090505b81518163ffffffff16101561424d576000828263ffffffff168151811061407e57fe5b602002602001015190506000601c8263ffffffff168154811061409d57fe5b906000526020600020015490508060005414614223576140bb615dc9565b6140cf82601d614e4f90919063ffffffff16565b6040518060a001604052908160008201548152602001600182016040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561414357602002820191906000526020600020905b81548152602001906001019080831161412f575b505050505081525050815260200160028201604051806020016040529081600082018054806020026020016040519081016040528092919081815260200182805480156141af57602002820191906000526020600020905b81548152602001906001019080831161419b575b5050505050815250508152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050878160600151141561420857614203826030614eea90919063ffffffff16565b61421d565b61421c82602f614eea90919063ffffffff16565b5b5061423e565b61423d8263ffffffff166031614eea90919063ffffffff16565b5b5050808060010191505061405b565b50614256615dc9565b614308858560316000018054806020026020016040519081016040528092919081815260200182805480156142aa57602002820191906000526020600020905b815481526020019060010190808311614296575b505050505060306000018054806020026020016040519081016040528092919081815260200182805480156142fe57602002820191906000526020600020905b8154815260200190600101908083116142ea575b5050505050615036565b905060008090505b61431a602f615003565b8163ffffffff1610156145165760006143438263ffffffff16602f6155a190919063ffffffff16565b905061434d615dc9565b61436182601d614e4f90919063ffffffff16565b6040518060a00160405290816000820154815260200160018201604051806020016040529081600082018054806020026020016040519081016040528092919081815260200182805480156143d557602002820191906000526020600020905b8154815260200190600101908083116143c1575b5050505050815250508152602001600282016040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561444157602002820191906000526020600020905b81548152602001906001019080831161442d575b5050505050815250508152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905060018160400151600001515114156144f6576060614492836155c5565b905060008090505b81518163ffffffff1610156144ef576000828263ffffffff16815181106144bd57fe5b602002602001015163ffffffff1690506144e181602e614eea90919063ffffffff16565b50808060010191505061449a565b5050614507565b6145068263ffffffff16886157f7565b5b50508080600101915050614310565b506000614523602e615003565b90506060816040519080825280602002602001820160405280156145565781602001602082028038833980820191505090505b50905060008090505b828163ffffffff1610156145c65760006145898263ffffffff16602e6155a190919063ffffffff16565b905080838363ffffffff168151811061459e57fe5b602002602001019063ffffffff16908163ffffffff168152505050808060010191505061455f565b506145d081615852565b60006145ea8460000151601d614e4f90919063ffffffff16565b6002016000018054905014156145ff57600080fd5b602e600080820160006146129190615da8565b5050602f600080820160006146279190615da8565b505060306000808201600061463c9190615da8565b50506031600080820160006146519190615da8565b50508094505050505092915050565b6000600660009054906101000a900463ffffffff16600660009054906101000a900463ffffffff1602905060608163ffffffff166040519080825280602002602001820160405280156146c25781602001602082028038833980820191505090505b50905080600890805190602001906146db929190615e06565b5080601c90805190602001906146f2929190615e06565b508163ffffffff166016819055508163ffffffff166017819055506016546005819055506040518060400160405280600081526020016000815250601a60008201518160000155602082015181600101559050508160020263ffffffff16601581905550600d54601481905550602254600b540260296000600e60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16602b6000602254600b5402815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602554602a6000600b54815260200190815260200160002081905550602554602a6000600d548152602001908152602001600020819055506001602160006101000a81548160ff0219169083151502179055505050565b6000600260198054905010156148b55760009050614a18565b601554601354106148f2576001600e60006101000a81548160ff021916908315150217905550600e60009054906101000a900460ff169050614a18565b6148fa615d8e565b60196001601980549050038154811061490f57fe5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050600081602001519050600060175482149050614958615d8e565b60196001601980549050038154811061496d57fe5b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505090506000816020015190506000601754821490508080156149b85750835b600e60006101000a81548160ff02191690831515021790555060011515600e60009054906101000a900460ff16151514156149ff576149f5611246565b506149fe613927565b5b600e60009054906101000a900460ff1696505050505050505b90565b600080826000015111614a2d57600080fd5b60018260000151038260000181815250508160200151826000015181518110614a5257fe5b60200260200101519050919050565b6060614a6b615d74565b614a7560046137d4565b90506000600660009054906101000a900463ffffffff1663ffffffff168463ffffffff1681614aa057fe5b0490506000600660009054906101000a900463ffffffff1663ffffffff168563ffffffff1681614acc57fe5b069050614adc600183018261591e565b15614b1557614b1381600660009054906101000a900463ffffffff1660018501020163ffffffff1684614c8490919063ffffffff16565b505b614b22826001830161591e565b15614b5b57614b59600182600660009054906101000a900463ffffffff168502010163ffffffff1684614c8490919063ffffffff16565b505b614b68600183038261591e565b15614ba157614b9f81600660009054906101000a900463ffffffff1660018503020163ffffffff1684614c8490919063ffffffff16565b505b614bae826001830361591e565b15614be757614be5600182600660009054906101000a900463ffffffff168502010363ffffffff1684614c8490919063ffffffff16565b505b60608360000151604051908082528060200260200182016040528015614c1c5781602001602082028038833980820191505090505b50905060008090505b8460000151811015614c7757614c44818661501490919063ffffffff16565b828281518110614c5057fe5b602002602001019063ffffffff16908163ffffffff16815250508080600101915050614c25565b5080945050505050919050565b614c8c615d74565b60008360200151519050836000015181148015614ca95750600081145b15614d1c576060610100604051908082528060200260200182016040528015614ce15781602001602082028038833980820191505090505b5090508381600081518110614cf257fe5b60200260200101818152505060018560000181815250508085602001819052508492505050614e49565b836000015181148015614d30575060008114155b15614dfd57606060028202604051908082528060200260200182016040528015614d695781602001602082028038833980820191505090505b50905060008090505b8560000151811015614dbb5785602001518181518110614d8e57fe5b6020026020010151828281518110614da257fe5b6020026020010181815250508080600101915050614d72565b508381866000015181518110614dcd57fe5b60200260200101818152505080856020018190525060018560000181815101915081815250508492505050614e49565b8084600001511015614e4457828460200151856000015181518110614e1e57fe5b602002602001018181525050600184600001818151019150818152505083915050614e49565b839150505b92915050565b6000614e5b83836159a8565b614ecd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f676574206d757374206e6f74206e756c6c00000000000000000000000000000081525060200191505060405180910390fd5b826000016000838152602001908152602001600020905092915050565b614ef482826159f5565b15614efe57614f2d565b816000018190806001815401808255809150509060018203906000526020600020016000909192909190915055505b5050565b614f3b82826159f5565b614f90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526035815260200180615f3a6035913960400191505060405180910390fd5b6000826000016001614fa185615003565b0381548110614fac57fe5b906000526020600020015490506000614fc58484615a53565b905081846000018281548110614fd757fe5b906000526020600020018190555083600001805480919060019003614ffc9190615e53565b5050505050565b600081600001805490509050919050565b60008260200151828151811061502657fe5b6020026020010151905092915050565b61503e615dc9565b602c600080820160006150519190615da8565b5050602d600080820160006150669190615da8565b50506150828463ffffffff16602c614eea90919063ffffffff16565b60008090505b83518110156150cb57600084828151811061509f57fe5b602002602001015190506150bd81602d614eea90919063ffffffff16565b508080600101915050615088565b5060008090505b82518110156152ea5760008382815181106150e957fe5b602002602001015190506150fb615dc9565b61510f82601d614e4f90919063ffffffff16565b6040518060a001604052908160008201548152602001600182016040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561518357602002820191906000526020600020905b81548152602001906001019080831161516f575b505050505081525050815260200160028201604051806020016040529081600082018054806020026020016040519081016040528092919081815260200182805480156151ef57602002820191906000526020600020905b8154815260200190600101908083116151db575b5050505050815250508152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905061522b615e7f565b8160200151905060008090505b81600001515181101561527d576152708260000151828151811061525857fe5b6020026020010151602c614eea90919063ffffffff16565b8080600101915050615238565b50615286615e7f565b8260400151905060008090505b8160000151518110156152d8576152cb826000015182815181106152b357fe5b6020026020010151602d614eea90919063ffffffff16565b8080600101915050615293565b505050505080806001019150506150d2565b50600082511461530f5761530e8463ffffffff16602d614f3190919063ffffffff16565b5b615387602d6040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561536e57602002820191906000526020600020905b81548152602001906001019080831161535a575b505050505081525050602c615b0390919063ffffffff16565b6153dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180615f186022913960400191505060405180910390fd5b6001601f600082825401925050819055506153f5615dc9565b6040518060a00160405280601f548152602001602c6040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561546457602002820191906000526020600020905b815481526020019060010190808311615450575b5050505050815250508152602001602d604051806020016040529081600082018054806020026020016040519081016040528092919081815260200182805480156154ce57602002820191906000526020600020905b8154815260200190600101908083116154ba575b5050505050815250508152602001878152602001600115158152509050615505816000015182601d615b619092919063ffffffff16565b60008090505b8160200151600001515181101561556a576000826020015160000151828151811061553257fe5b602002602001015190508260000151601c828154811061554e57fe5b906000526020600020018190555050808060010191505061550b565b50602c6000808201600061557e9190615da8565b5050602d600080820160006155939190615da8565b505080915050949350505050565b60008260000182815481106155b257fe5b9060005260206000200154905092915050565b60606155cf615dc9565b6155e383601d614e4f90919063ffffffff16565b6040518060a001604052908160008201548152602001600182016040518060200160405290816000820180548060200260200160405190810160405280929190818152602001828054801561565757602002820191906000526020600020905b815481526020019060010190808311615643575b505050505081525050815260200160028201604051806020016040529081600082018054806020026020016040519081016040528092919081815260200182805480156156c357602002820191906000526020600020905b8154815260200190600101908083116156af575b5050505050815250508152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905061570b83601d615c3690919063ffffffff16565b615713615e7f565b81602001519050606081600001519050606081516040519080825280602002602001820160405280156157555781602001602082028038833980820191505090505b50905060008090505b82518163ffffffff1610156157ea576000838263ffffffff168151811061578157fe5b60200260200101519050600054601c8263ffffffff16815481106157a157fe5b906000526020600020018190555080838363ffffffff16815181106157c257fe5b602002602001019063ffffffff16908163ffffffff168152505050808060010191505061575e565b5080945050505050919050565b60008163ffffffff169050600061581884601d614e4f90919063ffffffff16565b905061583082826002016159f590919063ffffffff16565b1561584c5761584b8282600201614f3190919063ffffffff16565b5b50505050565b60008090505b81518163ffffffff16101561591a576000828263ffffffff168151811061587b57fe5b60200260200101519050606061589082614a61565b905060008090505b81518163ffffffff16101561590a576000828263ffffffff16815181106158bb57fe5b602002602001015190506000601c8263ffffffff16815481106158da57fe5b9060005260206000200154905060005481146158fb576158fa8186615d35565b5b50508080600101915050615898565b5050508080600101915050615858565b5050565b6000808363ffffffff16101580156159535750600660009054906101000a900463ffffffff1663ffffffff168363ffffffff16105b8015615966575060008263ffffffff1610155b801561598f5750600660009054906101000a900463ffffffff1663ffffffff168263ffffffff16105b1561599d57600190506159a2565b600090505b92915050565b600080836001015414156159bf57600090506159ef565b6001151583600001600084815260200190815260200160002060040160009054906101000a900460ff1615151490505b92915050565b60008083600001805490501415615a0f5760009050615a4d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff615a3a8484615a53565b14615a485760019050615a4d565b600090505b92915050565b60008083600001805490501415615a8c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050615afd565b60008090505b8360000180549050811015615ad85782846000018281548110615ab157fe5b90600052602060002001541415615acb5780915050615afd565b8080600101915050615a92565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b600080600090505b826000015151811015615b5557615b398484600001518381518110615b2c57fe5b60200260200101516159f5565b15615b48576000915050615b5b565b8080600101915050615b0b565b50600190505b92915050565b615b6b83836159a8565b615b8357600183600101600082825401925050819055505b600181608001901515908115158152505080836000016000848152602001908152602001600020600082015181600001556020820151816001016000820151816000019080519060200190615bd9929190615e92565b5050506040820151816002016000820151816000019080519060200190615c01929190615e92565b5050506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050505050565b615c4082826159a8565b615cb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6e6f74206578697374000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8160000160008281526020019081526020016000206000808201600090556001820160008082016000615ce59190615da8565b50506002820160008082016000615cfc9190615da8565b505060038201600090556004820160006101000a81549060ff021916905550508160010160008154809291906001900391905055505050565b60008163ffffffff1690506000615d5684601d614e4f90919063ffffffff16565b9050615d6e8282600201614eea90919063ffffffff16565b50505050565b604051806040016040528060008152602001606081525090565b604051806040016040528060008152602001600081525090565b5080546000825590600052602060002090810190615dc69190615edf565b50565b6040518060a0016040528060008152602001615de3615f04565b8152602001615df0615f04565b8152602001600081526020016000151581525090565b828054828255906000526020600020908101928215615e42579160200282015b82811115615e41578251825591602001919060010190615e26565b5b509050615e4f9190615edf565b5090565b815481835581811115615e7a57818360005260206000209182019101615e799190615edf565b5b505050565b6040518060200160405280606081525090565b828054828255906000526020600020908101928215615ece579160200282015b82811115615ecd578251825591602001919060010190615eb2565b5b509050615edb9190615edf565b5090565b615f0191905b80821115615efd576000816000905550600101615ee5565b5090565b90565b604051806020016040528060608152509056fe73746f6e6573546d702e69736469736a6f696e74286c6962657274696573546d7029556e6f7264657265644b65795365742831303229202d204b657920646f6573206e6f7420657869737420696e20746865207365742ea265627a7a72315820f01b9e89d3200378732b1280af5b03d6188280aa65e79c47fdb3ce6aadbdcefa64736f6c634300050b0032";

var a= "0000000000000000000000000000000000000000000000000000000000000013";
   
const signMap = [

    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
    [+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0]

]


function getQueryString(name){
    var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
    var r = window.location.search.substr(1).match(reg);
    if(r!=null)return  unescape(r[2]); return null;
}

function setupWeb3Provider() {
    web3 = new window.Web3(window.ethereum);
    console.log(web3.version)
  }

  async function enableInjectedWeb3EthereumConnection() {
    try {
      await ethereum.enable();
    } catch (error) {
      // Handle error. Likely the user rejected the login:
      alert('Could not find Web3 provider/Ethereum wallet, defaulting to INFURA\n\nNote, you will not be able to use the Injected Web3 option.');
    }
  }

  async function deployContracAddress (){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    
      const accounts = await ethereum.enable()
      const account = accounts[0]
      console.log(account)
      //var contract = new web3.eth.Contract(abi, "0x274C7818B61d458Bf42e969Ef8EBb185f95F43a5");
     
     // web3.eth.getCode("0x274C7818B61d458Bf42e969Ef8EBb185f95F43a5").then(console.log);
     var contract1 = new web3.eth.Contract(abi, "0x70DaBb7f5a6146320D3490e75D325EC2Cb3C357D");

     var contract2 = contract1.clone();

     var gass
     contract2.deploy({
        data: code,
        arguments: [19]
    }).estimateGas(function(err, gas){
        
        contract2.deploy({
            data: code,
            arguments: [19]
        })
        .send({
            from: account,
            gas: 80000000,
            gasPrice: '1000000000',
            value:'1000000000'//这个值从表单里取
        })
        .then(function(newContractInstance){
            console.log(newContractInstance.options.address) // instance with the new contract address
            localStorage["contractAddress"] =newContractInstance.options.address;
        });


    })

    
  }

  async function checkCode() {

     
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    web3.eth.getCode(localStorage["contractAddress"]).then(console.log);

  }

  async function configureTransactionPlay(contractAddress,x,f) {

    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();

    const accounts = await ethereum.enable()
      const account = accounts[0]

    var myContract =  new web3.eth.Contract(abi,contractAddress);     
    myContract.methods.play(x).send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000'})
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
        f();
    })
    /** .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
       
    })*/
    .on('error', console.error);
    
  }


  async function challenge(contractAddress){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();

    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);  
     
    MyContract.methods.challenge().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            value: web3.utils.toWei("0.001","ether") })//这个值从表单里取
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }


  async function challengeConfirm(contractAddress){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();

    const accounts = await ethereum.enable()
    const account = accounts[0]
    console.log(account)
    var MyContract = new web3.eth.Contract(abi,contractAddress);  
     
    MyContract.methods.challengeConfirm().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  async function refreshBoardFromChain(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    console.log(account)
   var myContract = new web3.eth.Contract(abi,contractAddress);     
    myContract.methods.getBoard().call().then(function(data){
        f(data)
    });
  }

  async function refreshAllFromChain(contractAddress,f){
//这里做一些 按钮隐藏，显示账号，抵押金额，显示余额等功能
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
      const account = accounts[0]
    var myContract = new web3.eth.Contract(abi,contractAddress);     
   myContract.methods.N().call().then(function(data){
    console.log("N",data)
});
   myContract.methods.gameOver().call().then(function(data){
    console.log("gameOver",data)
});
   myContract.methods.start().call().then(function(data){
    console.log("start",data)
});
   myContract.methods.owner().call().then(function(data){
    console.log("owner",data)
});
   myContract.methods.challenger().call().then(function(data){
    console.log("challenger",data)
});
   myContract.methods.challengerValue(account).call().then(function(data){
    console.log("challengerValue",data)
});
   
   myContract.methods.ownerValue().call().then(function(data){
    console.log("ownerValue",data)
    f({"ownerValue":data});
});
   myContract.methods.winer().call().then(function(data){
    console.log("winer",data)
    f({"winer":data});
});
   myContract.methods.winerColor().call().then(function(data){
    console.log("winerColor",data)
    f({"winerColor":data});
});
   myContract.methods.step().call().then(function(data){
    console.log("step",data)
    f({"step":data});
});
   myContract.methods.toPlay().call().then(function(data){
    console.log("toPlay",data)
    f({"toPlay":data});
    myContract.methods.players(account).call().then(function(data2){

        
        if(data==data2){
            console.log("本人行棋");
            f({"player":data2,"myPlay":true});
            //this.state.busy = false;
        } else {
            console.log("对手行棋");
            f({"player":data2,"myPlay":false});
           // this.state.isBusy = true;
        }

    });

});
   myContract.methods.challengeStatus().call().then(function(data){
    console.log("challengeStatus",data)
});
   myContract.methods.colors(1).call().then(function(data){
    console.log("colors1",data)
});

myContract.methods.colors(-1).call().then(function(data){
    console.log("colors-1",data)
});
   myContract.methods.timer(1).call().then(function(data){
    console.log("timer 1",data)
});
   myContract.methods.timer(-1).call().then(function(data){
    console.log("timer -1",data)
});
   
  }

  async function giveUpChallenge(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.giveUpChallenge().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  async function getBackChallenge(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.getBackChallenge().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  async function getBackOwner(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.getBackOwner().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }


  async function destruct(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.destruct().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }


  async function applyforGameOver(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.applyforGameOver().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }


  async function confirmApplyforGameOver(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.confirmApplyforGameOver().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }


  async function rejectApplyforGameOver(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.rejectApplyforGameOver().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  async function forcerGameOver(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.forcerGameOver().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  async function passMove(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.passMove().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  async function updateScore(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.updateScore().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }




  async function resign(contractAddress,f){
    await enableInjectedWeb3EthereumConnection();
    setupWeb3Provider();
    const accounts = await ethereum.enable()
    const account = accounts[0]
    var MyContract = new web3.eth.Contract(abi,contractAddress);     
    MyContract.methods.resign().send({
        from: account,
            gas: 6000000,
            gasPrice: '1000000000',
            })
    .on('transactionHash', function(hash){
        console.log('transactionHash')
    })
    .on('receipt', function(receipt){
        console.log('receipt')
    })
    .on('confirmation', function(confirmationNumber, receipt){
        console.log('confirmation')
    })
    .on('error', console.error);
  }

  function arrTrans(num, arr) { // 一维数组转换为二维数组
    const iconsArr = []; // 声明数组
    arr.forEach((item, index) => {
      const page = Math.floor(index / num); // 计算该元素为第几个素组内
      if (!iconsArr[page]) { // 判断是否存在
        iconsArr[page] = [];
      }
      iconsArr[page].push(item);
    });
    return iconsArr;
  }
const createTwoWayCheckBox = component => (
    ({stateKey, text}) => h('label',
        {
            style: {
                display: 'flex',
                alignItems: 'center'
            }
        },

        h('input', {
            style: {marginRight: '.5em'},
            type: 'checkbox',
            checked: component.state[stateKey],

            onClick: () => component.setState(s => ({[stateKey]: !s[stateKey]}))
        }),

        h('span', {style: {userSelect: 'none'}}, text)
    )
)


class App extends Component {
    constructor(props) {
        super(props)
        //$('[target="_blank"]').removeAttr('target');
        Array.from(document.querySelectorAll('[target="_blank"]'))
  .forEach(link => link.removeAttribute('target'));

  //document.querySelectorAll("_blank");for(var i in nodes){nodes[i].removeAttribute("target")}
          setupWeb3Provider();
        this.state = {
            board: new Board(signMap),
            vertexSize: 32,
            showCoordinates: true,
            alternateCoordinates: true,
            
            isBusy: false,
            player:1
        }
        var id = getQueryString("id");
        if(id!=null ){
            console.log(id)
            // 刷新
            localStorage["contractAddress"]=id;
            function changeStats (state) {
                console.log(348,state.play)
              
            }
            refreshAllFromChain(id,changeStats);
           
        }else  {

           
            console.log("0000000")
        }
        if(localStorage["contractAddress"]) {
            refreshBoardFromChain(localStorage["contractAddress"],function(data){
                console.log("getBoard",data)
               var signM =  arrTrans(N,data);
                var newB= new Board(signM)
                console.log(674)
                this.setState({board: newB})
                console.log(676)
                                     
           }.bind(this));
        }
        
        this.CheckBox = createTwoWayCheckBox(this)
    }

    render() {
        let {vertexSize, showCoordinates, alternateCoordinates} = this.state

        return h('section',
            {
                style: {
                    display: 'grid',
                    gridTemplateColumns: '15em auto',
                    gridColumnGap: '1em'
                }
            },

            h('form',
                {
                    style: {
                        display: 'flex',
                        flexDirection: 'column'
                    }
                },

                h('p', {style: {margin: '0 0 .5em 0'}},
                    'Size: ',

                    h('button', {
                        type: 'button',
                        onClick: evt => {
                            this.setState(s => ({vertexSize: Math.max(s.vertexSize - 4, 4)}))
                        }
                    }, '-'), ' ',

                    h('button', {
                        type: 'button',
                        title: 'Reset',
                        onClick: evt => {
                            this.setState({vertexSize: 24})
                        }
                    }, '•'), ' ',

                    h('button', {
                        type: 'button',
                        onClick: evt => {
                            this.setState(s => ({vertexSize: s.vertexSize + 4}))
                        }
                    }, '+')
                ),

                h('p', {style: {margin: '0 0 .5em 0'}},
                    '从区块链刷新状态: ',

                    h('button', {
                        type: 'button',
                        title: '刷新状态',
                        onClick: evt => {
                            //this.setState({board: new Board(signMap)})
                            
                            refreshAllFromChain(localStorage["contractAddress"],function(state) {
                                console.log(341,state.myPlay)
                                console.log(this)
                                if(state.myPlay==true){
                                    //this.setBusy(false)
                                 }
                                 if(state.myPlay==false){
                                    //this.setBusy(true) 
                                 }
                            }.bind(this))
                        }
                    }, '刷新状态')
                ),

                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '刷新棋盘',
                    onClick: evt => {
                        
                        refreshBoardFromChain(localStorage["contractAddress"],function(data){
                            
                           var signM =  arrTrans(N,data);
                            var newB= new Board(signM)
                            
                            this.setState({board: newB})
                           
                                                 
                       }.bind(this));
                    }
                }, '刷新棋盘')
            ),


                 /** 
                        */

                h('p', {style: {margin: '0 0 .5em 0'}},
                    ': ',

                    h('button', {
                        type: 'button',
                        title: '部署代码',
                        
                        onClick: evt => {
                             deployContracAddress();
                            // await configureTransaction(true);
                        }
                    }, '部署代码')
                ),



                h('p', {style: {margin: '0 0 .5em 0'}},
                    '测试部署代码: ',

                    h('button', {
                        type: 'button',
                        title: '测试',
                        
                        onClick: evt => {
                            checkCode();

                        }
                    }, '部署')
                ),

                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',
                    h('button', {
                        type: 'button',
                        title: '挑战',
                        
                        onClick: evt => {
                            var contracAddress = localStorage["contractAddress"];
                            challenge(contracAddress);

                        }
                    }, '挑战')
                ),





                h('p', {style: {margin: '0 0 .5em 0'}},
                    ': ',

                    h('button', {
                        type: 'button',
                        title: '确认挑战',
                        
                        onClick: evt => {
                            var contracAddress = localStorage["contractAddress"];
                            challengeConfirm(contracAddress);

                        }
                    }, '确认挑战')
                ),

                h('p', {style: {margin: '0 0 .5em 0'}},
                    ': ',

                    h('button', {
                        type: 'button',
                        title: '对方未同意，挑战者主动放弃挑战',
                        
                        onClick: evt => {
                            giveUpChallenge();

                        }
                    }, '放弃挑战')
                ),



                h('p', {style: {margin: '0 0 .5em 0'}},
                    ': ',

                    h('button', {
                        type: 'button',
                        title: '拒绝挑战',
                        
                        onClick: evt => {
                            challengeReject();

                        }
                    }, '拒绝挑战')
                ),


                h('p', {style: {margin: '0 0 .5em 0'}},
                    ': ',

                    h('button', {
                        type: 'button',
                        title: '挑战者在拒绝时取回押金',
                        
                        onClick: evt => {
                            getBackChallenge();

                        }
                    }, '挑战者取回押金')
                ),


                h('p', {style: {margin: '0 0 .5em 0'}},
                    ': ',

                    h('button', {
                        type: 'button',
                        title: '创建者在无人挑战时取回押金',
                        
                        onClick: evt => {
                            getBackOwner();

                        }
                    }, '创建者取回押金')
                ),

                

                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '申请点目',
                    
                    onClick: evt => {
                        applyforGameOver();

                    }
                }, '申请点目')
                ),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '同意点目',
                    
                    onClick: evt => {
                        confirmApplyforGameOver();

                    }
                }, '同意点目')),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '拒绝点目',
                    
                    onClick: evt => {
                        rejectApplyforGameOver();

                    }
                }, '拒绝点目')),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '强制点目',
                    
                    onClick: evt => {
                        forcerGameOver();

                    }
                }, '强制点目')),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '投降',
                    
                    onClick: evt => {
                        resign();

                    }
                }, '投降')),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '胜利者取回奖励',
                    
                    onClick: evt => {
                        destruct();

                    }
                }, '胜利者取回奖励')),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '放弃一手棋',
                    
                    onClick: evt => {
                        passMove();

                    }
                }, '放弃一手棋')),


                h('p', {style: {margin: '0 0 .5em 0'}},
                ': ',

                h('button', {
                    type: 'button',
                    title: '没啥用的更新积分',
                    id:'updateScoreBut',
                    onClick: evt => {
                        updateScore();

                    }
                }, '更新积分')),



                
                h(this.CheckBox, {stateKey: 'isBusy', text: 'Busy'})
            ),

            h('div', {},
                h(Goban, {
                    innerProps: {
                        onContextMenu: evt => evt.preventDefault()
                    },

                    vertexSize,
                    animate: true,
                    busy: this.state.isBusy,
                    
                    coordX: alternateCoordinates ? i => chineseCoord[i] : undefined,
                    coordY: alternateCoordinates ? i => i + 1 : undefined,

                    signMap: this.state.board.signMap,
                    showCoordinates,
                    

                    

                    onVertexMouseUp: (evt, [x, y]) => {
                        let sign = this.state.player
                        if(parseInt(this.state.board.get([x, y]))!== 0){
                            console.log(this.state.board.get([x, y]));
                            return
                        }
                       console.log(735,this)
                       console.log([x, y])
                       var contracAddress = localStorage["contractAddress"];
                        configureTransactionPlay(contracAddress,x+y*N,function () {
                            console.log(738,this)
                            let newBoard = this.state.board.makeMove(sign, [x, y])
                            console.log(newBoard)
                            this.setState({board: newBoard})
                            this.state.player *= -1
                        }.bind(this));

                       
                        
                       
                    }
                }),

                alternateCoordinates && h('style', {}, `
                    .shudan-coordx span {
                        font-size: .45em;
                    }
                `)
            )
        )
    }
}

render(h(App), document.getElementById('root'))
